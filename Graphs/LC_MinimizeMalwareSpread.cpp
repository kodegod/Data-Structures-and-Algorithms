//https://leetcode.com/problems/minimize-malware-spread/

//DSU with size

class Solution {
public:
    vector<int> par,sz,sz2;
    int get_root(int u)
    {
        if(par[u]==u)
            return u;
        return par[u]=get_root(par[u]);
    }
    void merge(int u,int v)
    {
        int a=get_root(u);
        int b=get_root(v);
        if(a==b)
            return;
        if(rand()%2)
        {
            par[a]=b;
            sz[b]+=sz[a];
            sz2[b]+=sz2[a];
        }
        else
        {
            par[b]=a;
            sz[a]+=sz[b];
            sz2[a]+=sz2[b];
        }
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        par.resize(n,0);
        sz.resize(n,0);
        sz2.resize(n,0);
        for(int i=0; i<n; i++)
        {
            par[i]=i;
            sz[i]=1;
        }
        for(int i=0; i<initial.size(); i++)
            sz2[initial[i]]++;
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<n; j++)
                if(graph[i][j]==1 && i!=j)
                    merge(i,j);
        }
        int curr=0;
        int curr_size=INT_MIN;
        int k=initial.size();
        sort(initial.begin(),initial.end());    
        for(int i=0; i<k; i++)
        {
            int a=get_root(initial[i]);
            if(sz2[a]==1 && sz[a]>curr_size)
            {
                curr=i;
                curr_size=sz[a];
            }
        }
        return initial[curr];
    }
};
